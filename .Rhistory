#P1
#Đọc dữ dataset
data <- read.csv('googleplaystore.csv', encoding = "UTF-8")
#Số hàng
nrow(data)
#Số cột
ncol(data)
#P2
#Hiển thị cột
names(data)
#P3
#Thay giá trị "" bằng NA
data[data == ""] <- NA
#Xóa các hàng trùng nhau
data <- unique(data)
#Xóa các hàng trùng giá trị ở một số cột
data <-
distinct(data,
Name,
Category,
Current.Ver,
Last.Updated,
Android.Ver,
.keep_all = T)
#Tìm số giá trị NA trong mỗi cột
colSums(is.na(data))
#Thay các giá trị NA trong cột Rating
data[!is.na(data$Rating), ]$Rating <- mean(data$Rating, na.rm = T)
#Kiểm tra các giá trị trong cột Current.Ver
unique(data$Current.Ver)
#Thay thế giá trị NA trong cột Current.Ver
data[is.na(data$Current.Ver),]$Current.Ver <-
"Varies with device"
#Kiểm tra kiểu dữ liệu các cột
sapply(data, class)
#Check các giá trị trong cột Size
unique(data$Size)
data[data$Size == "Varies with device", ]$Size <- "-1"
data[endsWith(data$Size, "M"), ]$Size <-
substring(data[endsWith(data$Size, "M"), ]$Size , 1, nchar(data[endsWith(data$Size, "M"), ]$Size) -
1)
data[endsWith(data$Size, "k"), ]$Size <-
as.character(as.numeric(substring(data[endsWith(data$Size, "k"), ]$Size , 1, nchar(data[endsWith(data$Size, "k"), ]$Size) -
1))/1024)
data$Size <- as.numeric(data$Size)
tmp <- data[data$Size > 0,]
data[data$Size == -1, ]$Size <- mean(tmp$Size)
data$Size <- round(data$Size, digits = 2)
#Check các giá trị trong cột Rating (1-5)
sort(unique(data$Rating))
#Check các giá trị trong cột Installs
unique(data$Installs)
# Loại bỏ dấu + và , trong mỗi hàng của cột Installs
data$Installs <- gsub('[+,]', '', data$Installs)
#Đổi kiểu dữ liệu cột Install sang Integer
data$Installs <- as.integer(data$Installs)
#Lấy các giá trị có Installs cao hơn hoặc bằng Reviews
data <- data[data$Installs >= data$Reviews,]
#Check các giá trị trong cột Price
unique(data$Price)
# Loại bỏ dấu $ trong mỗi hàng của cột Price
data$Price <- gsub('[$]', '', data$Price)
#Đổi kiểu dữ liệu cột Price sang Numeric
data$Price <- as.numeric(data$Price)
#Thay thế các giá trị có Free mà Price > 0 và ngược lại
data[data$Price > 0,]$Type <- "Paid"
data[data$Price == 0,]$Type <- "Free"
#Lưu file clean
write.csv(data, "clean.csv", row.names = FALSE)
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[,-c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
corr <- round(cor(model, method = "pearson"), digits = 2)
melt <- melt(corr)
corr
img7 <- ggplot(data = melt, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(
low = "#438295",
high = "#C3553A",
mid = "#F2F2F2",
midpoint = 0.4,
limit = c(-0.2, 1),
space = "Lab",
name = "Tương quan Pearson"
) +
geom_text(aes(Var2, Var1, label = value),
color = "black",
size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
) +
guides(fill = guide_colorbar(barwidth = 2, barheight = 40)) +
ggtitle("Bảng so sánh sự tương quan giữa các giá trị")
img7
linearModel <- lm(Reviews~Installs , data = model)
linearModel
plot(model$Reviews~model$Installs, pch = 16)
abline(linearModel)
summary(linearModel)
write.csv(model, "model.csv", row.names = FALSE)
runApp('web.R')
#Tìm số giá trị NA trong mỗi cột
colSums(is.na(data))
#P1
#Đọc dữ dataset
data <- read.csv('googleplaystore.csv', encoding = "UTF-8")
#Số hàng
nrow(data)
#Số cột
ncol(data)
#P2
#Hiển thị cột
names(data)
#P3
#Thay giá trị "" bằng NA
data[data == ""] <- NA
#Xóa các hàng trùng nhau
data <- unique(data)
#Xóa các hàng trùng giá trị ở một số cột
data <-
distinct(data,
Name,
Category,
Current.Ver,
Last.Updated,
Android.Ver,
.keep_all = T)
#Tìm số giá trị NA trong mỗi cột
colSums(is.na(data))
#Thay các giá trị NA trong cột Rating
data[is.na(data$Rating), ]$Rating <- mean(data$Rating, na.rm = T)
#Tìm số giá trị NA trong mỗi cột
colSums(is.na(data))
#Thay thế giá trị NA trong cột Current.Ver
data[is.na(data$Current.Ver),]$Current.Ver <-
"Varies with device"
#Kiểm tra kiểu dữ liệu các cột
sapply(data, class)
#Check các giá trị trong cột Size
unique(data$Size)
data[data$Size == "Varies with device", ]$Size <- "-1"
data[endsWith(data$Size, "M"), ]$Size <-
substring(data[endsWith(data$Size, "M"), ]$Size , 1, nchar(data[endsWith(data$Size, "M"), ]$Size) -
1)
data[endsWith(data$Size, "k"), ]$Size <-
as.character(as.numeric(substring(data[endsWith(data$Size, "k"), ]$Size , 1, nchar(data[endsWith(data$Size, "k"), ]$Size) -
1))/1024)
data$Size <- as.numeric(data$Size)
tmp <- data[data$Size > 0,]
data[data$Size == -1, ]$Size <- mean(tmp$Size)
data$Size <- round(data$Size, digits = 2)
#Check các giá trị trong cột Rating (1-5)
sort(unique(data$Rating))
#Check các giá trị trong cột Installs
unique(data$Installs)
# Loại bỏ dấu + và , trong mỗi hàng của cột Installs
data$Installs <- gsub('[+,]', '', data$Installs)
#Đổi kiểu dữ liệu cột Install sang Integer
data$Installs <- as.integer(data$Installs)
#Lấy các giá trị có Installs cao hơn hoặc bằng Reviews
data <- data[data$Installs >= data$Reviews,]
#Check các giá trị trong cột Price
unique(data$Price)
# Loại bỏ dấu $ trong mỗi hàng của cột Price
data$Price <- gsub('[$]', '', data$Price)
#Đổi kiểu dữ liệu cột Price sang Numeric
data$Price <- as.numeric(data$Price)
#Thay thế các giá trị có Free mà Price > 0 và ngược lại
data[data$Price > 0,]$Type <- "Paid"
data[data$Price == 0,]$Type <- "Free"
#Lưu file clean
write.csv(data, "clean.csv", row.names = FALSE)
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[,-c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.9)
stats <- read.csv('clean.csv', encoding = "UTF-8")
s1 <- aggregate(stats$Category, by = list(stats$Category), length)
s1$x <- round(s1$x / nrow(stats) * 100, digits = 1)
s1 <- s1[order(s1$x, decreasing = T), ]
tmp <- s1[s1$x <= 2.3,]
s1 <- s1[s1$x > 2.3,]
s1 <- rbind(s1, data.frame(Group.1 = "OTHER", x = sum(tmp$x)))
cate <- s1$Group.1
img1 <- ggplot() + theme_bw() +
geom_bar(aes(x = "",
y = catep,
fill = cate.factor),
stat = "identity",
color = "white") +
coord_polar("y", start = 0) +
ggtitle("Các thể loại của ứng dụng") +
theme(
plot.title = element_text(hjust = 0.5, size = 20),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
) +
geom_text(aes(
x = 1.6,
y = catepy,
label = paste0(catep, "%")
), size = 4) +
guides(fill = guide_legend(title = "Category", reverse = T))
img1
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[,-c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[,-c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model<- model[model$Installs>min_threshold & model$Installs < max_threshold,]
write.csv(model, "model.csv", row.names = FALSE)
runApp('web.R')
model <- model[model$Reviews * 2 > model$Installs, ]
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
model <- model[model$Reviews * 2 > model$Installs, ]
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
model <- model[model$Reviews * 5 > model$Installs, ]
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
model$Mean <- model$Reviews/model$Installs
quantile(model$Mean, probs = seq(0, 1, 1 / 20))
model <- model[model$Mean<0.016]
model <- model[model$Mean<0.016,]
linearModel <- lm(Reviews ~ Installs , data = model)
linearModel
linearModel <- lm(Installs ~ Reviews , data = model)
linearModel
summary(linearModel)
corr1 <- cor.test(model$Installs, model$Reviews, method = "pearson")
corr1
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
model$Mean <- model$Reviews/model$Installs
quantile(model$Mean, probs = seq(0, 1, 1 / 20))
model <- model[model$Mean<0.028,]
corr1 <- cor.test(model$Installs, model$Reviews, method = "pearson")
corr1
linearModel <- lm(Installs ~ Reviews , data = model)
linearModel
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
model$Mean <- model$Reviews/model$Installs
quantile(model$Mean, probs = seq(0, 1, 1 / 20))
model <- model[model$Mean>0.05,]
corr1 <- cor.test(model$Installs, model$Reviews, method = "pearson")
corr1
linearModel <- lm(Installs ~ Reviews , data = model)
linearModel
write.csv(model, "model.csv", row.names = FALSE)
runApp('web.R')
library(shiny); runApp('web.R')
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
model$Mean <- model$Reviews/model$Installs
quantile(model$Mean, probs = seq(0, 1, 1 / 20))
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
model$Mean <- model$Reviews/model$Installs
quantile(model$Mean, probs = seq(0, 1, 1 / 20))
model <- model[model$Mean>0.03,]
linearModel <- lm(Installs ~ Reviews , data = model)
linearModel
fitted(linearModel)
resid(linearModel)
datten <- par(mfrow = c(2, 2))
plot(model$Installs ~ model$Reviews, pch = 16)
plot(model$Installs ~ model$Reviews, pch = 16)
abline(linearModel)
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
model$Mean <- model$Reviews/model$Installs
quantile(model$Mean, probs = seq(0, 1, 1 / 20))
model <- model[model$Mean>0.02,]
write.csv(model, "model.csv", row.names = FALSE)
linearModel <- lm(Installs ~ Reviews , data = model)
fitted(linearModel)
resid(linearModel)
datten <- par(mfrow = c(2, 2))
plot(model$Installs ~ model$Reviews, pch = 16)
abline(linearModel)
runApp('web.R')
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
model$Reviews <- log2(model$Reviews)
model$Installs <- log2(model$Installs)
runApp('web.R')
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
stats <- read.csv('clean.csv', encoding = "UTF-8")
#Năm cập nhật
stats$Year <-
as.integer(str_split_fixed(stats$Last.Updated, ", ", 2)[, 2])
model <- stats[stats$Year = 2018,]
model <- stats[stats$Year == 2018,]
linearModel <- lm(Installs ~ Reviews , data = model)
summary(linearModel)
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.4)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
linearModel <- lm(Installs ~ Reviews , data = model)
linearModel
summary(linearModel)
model <- read.csv('clean.csv', encoding = "UTF-8")
nrow(model[model$Installs>=500])
nrow(model[model$Installs>=500],)
nrow(model[model$Installs>=500,])
model <- read.csv('clean.csv', encoding = "UTF-8")
nrow(model[model$Installs>=500,])
model <- stats[stats$Year == 2018,]
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.4)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
model$Reviews <- model$Reviews/10000000
model$Installs <- model$Installs/10000000
linearModel <- lm(Installs ~ Reviews , data = model)
linearModel
fitted(linearModel)
resid(linearModel)
datten <- par(mfrow = c(2, 2))
plot(model$Installs ~ model$Reviews, pch = 16)
plot(model$Installs ~ model$Reviews, pch = 16)
abline(linearModel)
linearModel <- lm(Installs ~ Reviews , data = model)
linearModel
summary(linearModel)
model <- read.csv('clean.csv', encoding = "UTF-8")
nrow(model[model$Installs>=500,])
model <- stats[stats$Year == 2018,]
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.4)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
model$Reviews <- model$Reviews/1000000
model$Installs <- model$Installs/1000000
linearModel <- lm(Installs ~ Reviews , data = model)
linearModel
summary(linearModel)
model <- read.csv('clean.csv', encoding = "UTF-8")
nrow(model[model$Installs>=500,])
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
model <- stats[stats$Year == 2018,]
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12)]
model <- stats[stats$Year == 2018,]
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12, 13, 14, 15)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
corr1 <- cor.test(model$Installs, model$Reviews, method = "pearson")
corr1
linearModel <- lm(Installs ~ Reviews , data = model)
linearModel
summary(linearModel)
model$Reviews <- model$Reviews/1000000
model$Installs <- model$Installs/1000000
corr1 <- cor.test(model$Installs, model$Reviews, method = "pearson")
corr1
linearModel <- lm(Installs ~ Reviews , data = model)
linearModel
summary(linearModel)
plot(model$Installs ~ model$Reviews, pch = 16)
abline(linearModel)
plot(model$Installs ~ model$Reviews, pch = 16)
abline(linearModel)
plot(model$Installs ~ model$Reviews, pch = 16, xlim(0,10))
plot(model$Installs ~ model$Reviews, pch = 16, xlim=c(0,10))
plot(model$Installs ~ model$Reviews, pch = 16, xlim=c(0,10), ylim=c(0,20))
abline(linearModel)
plot(model$Installs ~ model$Reviews, pch = 16, xlim=c(0,10), ylim=c(0,50))
plot(model$Installs ~ model$Reviews, pch = 16, xlim=c(0,50), ylim=c(0,50))
abline(linearModel)
linearModel <- lm(Reviews ~ Installs , data = model)
linearModel
summary(linearModel)
plot(model$Reviews ~ model$Installs, pch = 16, xlim=c(0,50), ylim=c(0,50))
plot(model$Reviews ~ model$Installs, pch = 16, xlim=c(0,50), ylim=c(0,20))
abline(linearModel)
plot(model$Reviews ~ model$Installs, pch = 16, xlim=c(0,15), ylim=c(0,20))
abline(linearModel)
plot(model$Reviews ~ model$Installs, pch = 16, xlim=c(0,15), ylim=c(0,10))
abline(linearModel)
linearModel.predict(1)
predict(linearModel, 1)
predict(linearModel, data.frame(x=c(1,2,3)))
linearModel
linearModel$coefficients
linearModel$residuals
model <- read.csv('clean.csv', encoding = "UTF-8")
model <- stats[stats$Year == 2018,]
model <- model[, -c(1, 2, 7 , 9, 10, 11, 12, 13, 14, 15)]
quantile(model$Installs, probs = seq(0, 1, 1 / 20))
max_threshold <- quantile(model$Installs, 0.95)
min_threshold <- quantile(model$Installs, 0.1)
model <-
model[model$Installs > min_threshold &
model$Installs < max_threshold, ]
model$Reviews <- model$Reviews/1000000
model$Installs <- model$Installs/1000000
write.csv(model, "model.csv", row.names = FALSE)
library(shiny); runApp('web.R')
img7 <- ggplot(data = melt, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(
low = "#438295",
high = "#C3553A",
mid = "#F2F2F2",
midpoint = 0.4,
limit = c(-0.2, 1),
space = "Lab",
name = "Tương quan Pearson"
) +
geom_text(aes(Var2, Var1, label = value),
color = "black",
size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
) +
guides(fill = guide_colorbar(barwidth = 2, barheight = 40)) +
ggtitle("Bảng so sánh sự tương quan giữa các giá trị")
img7
runApp('web.R')
